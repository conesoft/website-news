@using Conesoft.Blazor.Components.Base
@using Conesoft.Files
@using Conesoft.Hosting

@page "/favourites"

@rendermode InteractiveServer

@inject HostEnvironment environment
@inject AuthenticationStateProvider authenticationStateProvider

<main>
    @if (storage != null)
    {
        <LiveDirectory Directory="@storage" Context="root" OnLive="OnLiveRoot">
            <section id="addnewentry" inert=@(!root.Directories.Any())>
                <form>
                    <input type="text" placeholder="favourite url to add" @bind="@url" />
                    <select @bind="urlCategory">
                        @{
                            var first = true;
                            foreach (var category in root.Directories)
                            {
                                <option value="@category.Name" selected="@first">@category.Name</option>
                                first = false;
                            }
                        }
                    </select>
                    <button @onclick=@AddFavourite>＋</button>
                </form>
            </section>

            <section id="categories" title="categories">
                <ul class="without-icon">
                    <li>
                        <section>
                            @foreach (var directory in root.Directories)
                            {
                                <b>@directory.Name</b>
                            }
                        </section>
                        <input type="text" placeholder="category to add" @bind="@category" @bind:event="oninput" @onkeydown=@AddCategoryIfEnter />
                        <button @onclick=@AddCategory>＋</button>
                    </li>
                </ul>
            </section>

            <section>
                <ul class="without-icon">
                    <li>
                        <SelectItems Items="@tags" @bind-Selected="@selectedTags" Placeholder="select tags"/>
                    </li>
                </ul>
            </section>

            @foreach (var category in root.Directories)
            {
                if (category.Files.Any())
                {
                    <section title="@category.Name">
                        <ul class="without-icon">
                            <LiveDirectory Directory="@category">
                                @foreach (var file in context.Files)
                                {
                                    <li>
                                        <section>
                                            <a href="@file.Now.ReadText()" target="_blank">@file.Now.ReadText()</a>
                                        </section>
                                        <menu>
                                            <li>
                                                <button title="delete" dangerous @onclick=@(() => RemoveFavourite(file))>✕</button>
                                            </li>
                                        </menu>
                                    </li>
                                }
                            </LiveDirectory>
                        </ul>
                    </section>
                }
            }
        </LiveDirectory>
    }
</main>

@code {
    Directory? storage;
    string? username;

    string url = "";
    string urlCategory = "";
    string category = "";

    string[] tags = [];
    string[] selectedTags = [];

    protected override async Task OnInitializedAsync()
    {
        var state = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (state?.User?.Identity?.Name is string name)
        {
            username = name;
            storage = environment.Global.Storage / "favourites" / name;
            storage.Create();
        }
    }

    public Task OnLiveRoot(Directory directory)
    {
        urlCategory = directory.Directories.Select(d => d.Name).FirstOrDefault() ?? "";
        tags = [..directory.Directories.Select(d => d.Name)];
        return Task.CompletedTask;
    }

    public async Task AddFavourite()
    {
        if (storage != null && string.IsNullOrWhiteSpace(url) == false)
        {
            var file = storage / urlCategory / Filename.From(new Uri(url).Host, "txt");
            while (file.Exists)
            {
                file = file.Parent / Filename.From(file.NameWithoutExtension + " x", file.Extension);
            }
            file.Parent.Create();
            await file.WriteText(url);
        }
    }

    public Task RemoveFavourite(File file) => file.Delete();

    public void AddCategory()
    {
        if (storage != null && string.IsNullOrWhiteSpace(category) == false)
        {
            (storage / category).Create();
        }
    }

    public void AddCategoryIfEnter(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Code == "Enter" || eventArgs.Code == "NumpadEnter")
        {
            AddCategory();
        }
    }
}